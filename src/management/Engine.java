/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package management;

import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;
import motion.Animation;
import motion.Physics;
import objects.Entity;
import objects.Spawn;

/**
 *The main engine. Have your main class extend this class, then override all of the abstract methods.
 * @author James
 */
public abstract class Engine {
    private static final int MapVersion = 1;
    private static final int version = 1;
    private int fps;
    public Stage stage;
    
    /**
     *reference this to modify the animation timer object
     */
    public Timer animtimer;

    /**
     *The physics engine object. You reference this to make changes to the physics engine.
     */
    public Physics phy;

    /**
     *call this to start the engine
     */
    public void start() {
        this.animtimer = new Timer(version) {
            @Override
            public void action() {
                frame2();
            }
        };
        fps = 60;
        animtimer.setInterval(1000/fps);
        animtimer.stop();
        stage = new Stage();
        Scene s = new Scene(new Pane(), 500, 500);
        stage.setScene(s);
        stage.show();
        stage.setOnCloseRequest(new EventHandler() {

                @Override
                public void handle(Event event) {
                    System.exit(0);
                }
        });
        phy = new Physics() {

            @Override
            public void preTick() {
                frame();
            }

            @Override
            public void postTick() {
                postPhysicsTick();
            }
            
            @Override
            public void collision(Entity e1, Entity e2) {
                onCollision(e1, e2);
            }

            @Override
            public void spawn(Spawn spawn, Entity e) {
                onSpawning(spawn, e);
            }
        };
    }
    
    /**
     *returns the compatible map structure version
     * @return
     */
    public static int getMapVersion() {
        return MapVersion;
    }
    
    /**
     *called everytime a new frame is drawn.
     */
    public abstract void frame();
    
    /**
     *called everytime a spawner wants to spawn.
     * @param spawn the corresponding spawner
     * @param e the entity object generated by the spawner
     */
    public abstract void onSpawning(Spawn spawn, Entity e);
    
    /**
     *called everytime the physics engine finishes processing.
     */
    public abstract void postPhysicsTick();
    
    /**
     *called whenever a collision is detected.
     * @param e1
     * @param e2
     */
    public abstract void onCollision(Entity e1, Entity e2);
    
    /**
     *called in your main class. put all of your startup code in here
     */
    public abstract void init();
    
    private void frame2(){
        phy.check();
        Animation.nextFrames();
        TimeQueue.masterCheck();
    }
    
    /**
     *
     * @return the set FPS (does NOT return the actual FPS)
     */
    public int getFps() {
        return fps;
    }
    
    /**
     *Sets the engine's timing. Changing this changes the speed of the game itself.
     * @param fps
     */
    public void setFps(int fps) {
        this.fps = fps;
        animtimer.setInterval(1000/fps);
    }
    
    /**
     *starts/stops the animation timer.
     * @param run
     */
    public void setRunning(boolean run){
        if(run){
            animtimer.start();
        }else{
            animtimer.stop();
        }
    }

    /**
     *returns the engine's version
     * @return
     */
    public static int getVersion() {
        return version;
    }
    
}
